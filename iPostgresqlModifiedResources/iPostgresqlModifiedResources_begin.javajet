<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.List 
    	java.util.Map		
	" 
%>
<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
	
    String cid = node.getUniqueName();

    String dbhost = ElementParameterParser.getValue(node, "__HOST__");
    String dbport = ElementParameterParser.getValue(node, "__PORT__");
    String dbschema = ElementParameterParser.getValue(node, "__SCHEMA_DB__");
    String dbname = ElementParameterParser.getValue(node, "__DBNAME__");
    String dbuser = ElementParameterParser.getValue(node, "__USER__");
    String dbpass = ElementParameterParser.getValue(node, "__PASS__");
    
    String jobName = ElementParameterParser.getValue(node, "__JOBNAME__");
    String harvestType = ElementParameterParser.getValue(node, "__HARVEST_TYPE__");
%>

	org.apache.log4j.Logger logger_<%=cid%> = org.apache.log4j.Logger.getLogger("au.org.emii.talend.iPostgresqlModifiedResources");
    // logger_<%=cid%>.setLevel(org.apache.log4j.Level.WARN);

	int nb_resources_<%=cid %> = 0;
	
	String url_<%=cid %> = "jdbc:postgresql://"+<%=dbhost%>+":"+<%=dbport%>+"/"+<%=dbname%>;
	String schema_<%=cid%> = <%=dbschema%>;
	String userName_<%=cid%> = <%=(dbuser != null && dbuser.trim().length() == 0)? "null":dbuser%>;
	String password_<%=cid%> = <%=(dbpass != null && dbpass.trim().length() == 0)? "null":dbpass%>;
    String jobName_<%=cid%> = <%=jobName%>;
    String harvestType_<%=cid%> = <%=harvestType%>;
    
	java.io.File tempFile_<%=cid%> = null;
    
	try {
	    // Buffer modified resource details to temporary file to prevent jdbc connection 
	    // timeouts on long running jobs
	    
		tempFile_<%=cid%> = java.io.File.createTempFile("modified_resource_", ".tmp");
			
		java.io.FileOutputStream fos_<%=cid%> = null;
		java.io.ObjectOutputStream oos_<%=cid%> = null;
		java.sql.Connection conn_<%=cid%>=null;

	    try {
	    	// Get connection
			java.lang.Class.forName("org.postgresql.Driver");
			conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid%>, userName_<%=cid%>, password_<%=cid%>);
			conn_<%=cid%>.setAutoCommit(false);
			
			// Determine resources that have been added or modified since last invocation
			
			java.sql.Statement stmt_<%=cid%> = conn_<%=cid%>
					.createStatement();
	
			String dbquery_<%=cid%> = "select file.id, file.url, file.modified "
					+ "  from indexed_file file "
					+ "   LEFT OUTER JOIN file_harvest fh on (fh.harvest_type = '"
					+ harvestType_<%=cid%>
					+ "' and file.id = fh.file_id) "
					+ "   JOIN  index_job job on (job.name = '"
					+ jobName_<%=cid%>
					+ "'  and file.job_id = job.id and file.last_indexed_run = job.last_run_no) "
					+ " where fh.last_moddate_harvested is null or fh.last_moddate_harvested <> modified ";
		
			java.sql.ResultSet rs_<%=cid%> = stmt_<%=cid%>
					.executeQuery(dbquery_<%=cid%>);
					
			// Add each new or modified resource to temporary file
					
			fos_<%=cid%> = new java.io.FileOutputStream(tempFile_<%=cid%>);
			oos_<%=cid%> = new java.io.ObjectOutputStream(fos_<%=cid%>);
			
			while (rs_<%=cid%>.next()) {
				oos_<%=cid%>.writeLong(rs_<%=cid%>.getLong("id"));
				oos_<%=cid%>.writeObject(rs_<%=cid%>.getString("url"));
				oos_<%=cid%>.writeObject(new java.util.Date(rs_<%=cid%>.getTimestamp("modified").getTime()));
			
				nb_resources_<%=cid %>++;
			}
    
	    } finally {
			if (oos_<%=cid%> != null) {
				oos_<%=cid%>.close();
				oos_<%=cid%> = null;
			}
	        if (conn_<%=cid%> != null) {
	            conn_<%=cid%>.rollback();
	            conn_<%=cid%>.close();
	            conn_<%=cid%> = null;
	        }
	    }
    
		// Now iterate through buffered data
		
		java.io.ObjectInputStream in_<%=cid%> = null;
		
		try {
			// open buffered data for input
			in_<%=cid%> = new java.io.ObjectInputStream(new java.io.FileInputStream(tempFile_<%=cid%>));
			
			// for each buffered resource
			for (int i=0; i < nb_resources_<%=cid %>; i++) {
				// read buffered resource
				long id_<%=cid%> = in_<%=cid%>.readLong();
				String resourceUrl_<%=cid%> = (String) in_<%=cid%>.readObject();
				java.util.Date lastModified_<%=cid%> = (java.util.Date) in_<%=cid%>.readObject();
					
				// log resource details
				logger_<%=cid%>.debug("Processing url " + resourceUrl_<%=cid%> +
				 " last modified " + lastModified_<%=cid%>.toString() + "...");
				
				// Put buffered resource details into global map for use by components in iteration
				globalMap.put("<%=cid %>_URL",  resourceUrl_<%=cid%>);
				globalMap.put("<%=cid %>_MODIFIED",  lastModified_<%=cid%>);
    
				try {
	