<%@ jet 
imports="
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.INode
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.process.IConnection
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.types.JavaType
    org.talend.core.model.metadata.MappingTypeRetriever
    org.talend.core.model.metadata.MetadataTalendType    
    org.talend.core.model.process.IConnectionCategory    
    java.util.List
    java.util.ArrayList
    java.util.Map
    java.util.HashMap
    java.util.LinkedList
"
skeleton="../../../templates/db_output_bulk.skeleton"
%>

<%

    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();    
    String cid = node.getUniqueName();    
    String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
    String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
    String tableName = ElementParameterParser.getValue(node,"__TABLE__");
	String table = ElementParameterParser.getValue(node,"__TABLE__");	
	String tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");
    String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");
    List<Map<String, String>> addCols =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__ADD_COLS__");

    boolean useFieldOptions = ("true").equals(ElementParameterParser.getValue(node, "__USE_FIELD_OPTIONS__"));
    
    List<Map<String, String>> fieldOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FIELD_OPTIONS__");    
    
    String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
    
    String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
    boolean isEnableDebug = ("true").equals(ElementParameterParser.getValue(node,"__ENABLE_DEBUG_MODE__"));
	
	boolean useSpatialOptions = ("true").equals(ElementParameterParser.getValue(node,"__USE_SPATIAL_OPTIONS__"));
    boolean createSpatialIndex = ("true").equals(ElementParameterParser.getValue(node,"__SPATIAL_INDEX__"));
    boolean createGeometryColumns = ("true").equals(ElementParameterParser.getValue(node,"__GEOMETRY_COLUMNS__"));

	boolean useBatchSize = ("true").equals(ElementParameterParser.getValue(node,"__USE_BATCH_SIZE__"));
	String batchSize=ElementParameterParser.getValue(node,"__BATCH_SIZE__");
	
    //feature:2880
    getManager(dbmsId, cid, node);
    boolean whereSupportNull = ElementParameterParser.getValue(node, "__SUPPORT_NULL_WHERE__").equals("true");
	
    String incomingConnName = null;
    List<IMetadataColumn> columnList = getColumnList(node);
    
    List< ? extends IConnection> conns = node.getIncomingConnections();
    if(conns!=null && conns.size()>0){
        IConnection conn = conns.get(0);
        incomingConnName = conn.getName();
    }
        
    String rejectConnName = null;
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    if(rejectConns != null && rejectConns.size() > 0) {
        IConnection rejectConn = rejectConns.get(0);
        rejectConnName = rejectConn.getName();
    }
    List<IMetadataColumn> rejectColumnList = null;
    IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
    if(metadataTable != null) {
        rejectColumnList = metadataTable.getListColumns();      
    }
    
    List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();
    for(IConnection conn : outgoingConns) {
        if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
            %>        
            <%=conn.getName() %> = null;            
            <%      
        }
    }
    
    List<Column> stmtStructure =  getManager(dbmsId, cid).createColumnList(columnList, useFieldOptions, fieldOptions, addCols);
    
	Manager manager = null;
	boolean isDynamic = false;
	List<IMetadataTable> metadatas = node.getMetadataList();
	if ((metadatas!=null)&&(metadatas.size()>0)) {
		IMetadataTable metadata = metadatas.get(0);
		isDynamic = metadata.isDynamicSchema(); 
	}
	
    ////////////////////////////////////////////////////////////
    List<Column> colStruct =  new ArrayList();
    for(Column colStmt:stmtStructure){
    	if (!colStmt.isReplaced()&&!colStmt.isAddCol()) {
    		colStruct.add(colStmt);    		
    	} else if ( colStmt.isReplaced() ) {
	    	List <Column> replacements = colStmt.getReplacement() ;	    	
	    	for (int i=0; i < replacements.size() ; i++) {
	    		Column columnTest =columnTest = replacements.get(i);
	    		String sqlExpression = columnTest.getSqlStmt();
				if (sqlExpression.contains("?")) {
					colStruct.add(colStmt);
				}
			}
    	} 
    }

	if(isEnableDebug) {
%>
		query_<%=cid%> = new StringBuffer("");
<%
	}

	if(isDynamic) {
	%>
		if(nb_line_<%=cid%>==0) {
		<%
			if(columnList != null && columnList.size()>0) {    
       manager = null;
    %>
    <%@ include file="../../../templates/_tableActionForOutput.javajet"%>
    <%   
    Map<String, StringBuilder> actionSQLMap = getManager(dbmsId, cid).createProcessSQL(stmtStructure);
    StringBuilder insertColName = actionSQLMap.get(INSERT_COLUMN_NAME);   
    StringBuilder insertValueStmt = actionSQLMap.get(INSERT_VALUE_STMT);    
    StringBuilder updateSetStmt = actionSQLMap.get(UPDATE_SET_STMT);    
    StringBuilder updateWhereStmt = actionSQLMap.get(UPDATE_WHERE_STMT);
    StringBuilder deleteWhereStmt = actionSQLMap.get(DELETE_WHERE_STMT);

	if(("INSERT").equals(dataAction)) {
		List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
		if(conns_dynamic!=null && conns_dynamic.size()>0){
			IConnection conn = conns_dynamic.get(0);
			if(!("".equals(insertColName.toString()))) {
%>
				String insert_<%=cid%> = "INSERT INTO \"" + tableName_<%=cid%> + "\" (<%=insertColName.toString()%>, "+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=columnList.get(columnList.size()-1)%>, "<%=dbmsId %>")+") VALUES (<%=insertValueStmt.toString()%>, "+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=columnList.get(columnList.size()-1)%>)+")";
<%			} else {
%>
				String insert_<%=cid%> = "INSERT INTO \"" + tableName_<%=cid%> + "\" ("+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=columnList.get(columnList.size()-1)%>, "<%=dbmsId %>")+") VALUES ("+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=columnList.get(columnList.size()-1)%>)+")";
<%
			}
		}
	    %>
	    pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
	    <%
	} else if (("UPDATE").equals(dataAction)) {
		List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
		if(conns_dynamic!=null && conns_dynamic.size()>0){
			IConnection conn = conns_dynamic.get(0);
			if(!("".equals(updateSetStmt.toString()))) {
%>
				String update_<%=cid%> = "UPDATE \"" + tableName_<%=cid%> + "\" SET <%=updateSetStmt.toString()%>, "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=columnList.get(columnList.size()-1)%>, "<%=dbmsId %>")+" WHERE <%=updateWhereStmt.toString()%>";
<%			} else {
%>
				String update_<%=cid%> = "UPDATE \"" + tableName_<%=cid%> + "\" SET "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=columnList.get(columnList.size()-1)%>, "<%=dbmsId %>")+" WHERE <%=updateWhereStmt.toString()%>";
<%
			}
		}
	    %>
	    pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);
	    <%		
	} else if (("INSERT_OR_UPDATE").equals(dataAction)) {
		List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
		if(conns_dynamic!=null && conns_dynamic.size()>0){
			IConnection conn = conns_dynamic.get(0);
			if(!("".equals(insertColName.toString()))) {
%>
				String insert_<%=cid%> = "INSERT INTO \"" + tableName_<%=cid%> + "\" (<%=insertColName.toString()%>, "+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=columnList.get(columnList.size()-1)%>, "<%=dbmsId %>")+") VALUES (<%=insertValueStmt.toString()%>, "+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=columnList.get(columnList.size()-1)%>)+")";
<%			} else {
%>
				String insert_<%=cid%> = "INSERT INTO \"" + tableName_<%=cid%> + "\" ("+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=columnList.get(columnList.size()-1)%>, "<%=dbmsId %>")+") VALUES ("+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=columnList.get(columnList.size()-1)%>)+")";
<%
			}
			if(!("".equals(updateSetStmt.toString()))) {
%>
				String update_<%=cid%> = "UPDATE \"" + tableName_<%=cid%> + "\" SET <%=updateSetStmt.toString()%>, "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=columnList.get(columnList.size()-1)%>, "<%=dbmsId %>")+" WHERE <%=updateWhereStmt.toString()%>";
<%			} else {
%>
				String update_<%=cid%> = "UPDATE \"" + tableName_<%=cid%> + "\" SET "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=columnList.get(columnList.size()-1)%>, "<%=dbmsId %>")+" WHERE <%=updateWhereStmt.toString()%>";
<%
			}
		}
	    %>
	    pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_<%=cid%> + "\" WHERE <%=updateWhereStmt.toString()%>");
	    pstmtInsert_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
	    pstmtUpdate_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);	
	    <%
	} else if (("UPDATE_OR_INSERT").equals(dataAction)) {
		List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
		if(conns_dynamic!=null && conns_dynamic.size()>0){
			IConnection conn = conns_dynamic.get(0);
			if(!("".equals(insertColName.toString()))) {
%>
				String insert_<%=cid%> = "INSERT INTO \"" + tableName_<%=cid%> + "\" (<%=insertColName.toString()%>, "+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=columnList.get(columnList.size()-1)%>, "<%=dbmsId %>")+") VALUES (<%=insertValueStmt.toString()%>, "+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=columnList.get(columnList.size()-1)%>)+")";
<%			} else {
%>
				String insert_<%=cid%> = "INSERT INTO \"" + tableName_<%=cid%> + "\" ("+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=columnList.get(columnList.size()-1)%>, "<%=dbmsId %>")+") VALUES ("+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=columnList.get(columnList.size()-1)%>)+")";
<%
			}
			if(!("".equals(updateSetStmt.toString()))) {
%>
				String update_<%=cid%> = "UPDATE \"" + tableName_<%=cid%> + "\" SET <%=updateSetStmt.toString()%>, "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=columnList.get(columnList.size()-1)%>, "<%=dbmsId %>")+" WHERE <%=updateWhereStmt.toString()%>";
<%			} else {
%>
				String update_<%=cid%> = "UPDATE \"" + tableName_<%=cid%> + "\" SET "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=columnList.get(columnList.size()-1)%>, "<%=dbmsId %>")+" WHERE <%=updateWhereStmt.toString()%>";
<%
			}
		}
	    %>
	    pstmtUpdate_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);
	    pstmtInsert_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);		
	    <%			
	} else if (("DELETE").equals(dataAction)) {
	    %>
	    String delete_<%=cid%> = "DELETE FROM \"" + tableName_<%=cid%> + "\" WHERE <%=deleteWhereStmt.toString()%>";
	    pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(delete_<%=cid%>);
	    <%		
	}
    if(isEnableDebug) {
        %>
        StringBuffer query_<%=cid%> = null;
       	<%@ include file="../../../templates/DB/Output/splitSQLForAllDBInBegin.javajet" %>
        <%
    }
}
		%>
		}
	<%
	} //end isDynamic
	
	boolean isParallelize ="true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__PARALLELIZE__"));
	
	if (isParallelize) { // bug0014422
		String tAsyncIn_cid = "";
		if(conns!=null && conns.size() > 0) {
			tAsyncIn_cid = conns.get(0).getSource().getUniqueName();
		}
		if(!"true".equals(useExistingConn)) {
	    	if(!("").equals(commitEvery)&&!("0").equals(commitEvery)) {
%>
				commitEvery_<%=cid%> = buffersSize_<%=tAsyncIn_cid%>;
<%
	    	}
    	}
		if (useBatchSize) {
		    if(!("").equals(batchSize)&&!("0").equals(batchSize)) {
%>
				batchSize_<%=cid%> = buffersSize_<%=tAsyncIn_cid%>;
<%
		    }
    	}
	} // end bug0014422

    if(incomingConnName != null && columnList != null) {
        %>
        whetherReject_<%=cid%> = false;
        <%    
        if(("INSERT").equals(dataAction)) {
            int counter = 1;
            for(Column column : colStruct) {
                if(column.isInsertable()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                    %>
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counter, incomingConnName, cid, NORMAL_TYPE)%>
                    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counter, "insertSQLSplits_")%>;
                        <%
                    }
					if (typeToGenerate.equals("Geometry")) {
                        counter++;
                        if((createGeometryColumns || createSpatialIndex) && useSpatialOptions) {
                            %>
                            geometryColumnName_<%=cid %> = "<%=column.getColumn().getLabel() %>";
                            if (firstGeometry_<%=cid %>) {
                                dimension_<%=cid %> = 2;
                                
                                // A null first geometry will lead to unknown coordinate system  
                                if (<%=incomingConnName%>.<%=column.getName()%> == null) {
                            	    SRID_<%=cid %> = -1;
                                } else {
                                    org.opengis.referencing.crs.CoordinateReferenceSystem refSys_<%=cid %> = 
                                        ((org.talend.sdi.geometry.Geometry) <%=incomingConnName%>.<%=column.getName()%>).getCRS();
                                    if (refSys_<%=cid %> != null) {
                                        dimension_<%=cid %> = refSys_<%=cid %>.getCoordinateSystem().getDimension();
                                        try {
                                            java.util.Set ident_<%=cid %> = refSys_<%=cid %>.getIdentifiers();
                                            if ((ident_<%=cid %> == null || ident_<%=cid %>.isEmpty())
                                                && refSys_<%=cid %> == org.geotools.referencing.crs.DefaultGeographicCRS.WGS84) {
                                                SRID_<%=cid %> = 4326;
                                            } else {
                                                String code_<%=cid %> = ((org.geotools.referencing.NamedIdentifier) ident_<%=cid %>.toArray()[0]).getCode();
                                                SRID_<%=cid %> = Integer.parseInt(code_<%=cid %>);
                                            }
                                        } catch (java.lang.Exception e) {
                                            System.out.println("SRID_<%=cid %> could not be determined");
                                            SRID_<%=cid %> = -1;
                                        }
                                     }  else {
                                        SRID_<%=cid %> = -1;
                                     }
                                     firstGeometry_<%=cid %> = false;
                                 }
                            }
                            <%
                        }
                    } 
                    counter++;                        
                }
            }
			if(isDynamic) {
				Column dynamicColumn = getColumn(columnList.get(columnList.size()-1));
				String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
				if("Dynamic".equals(typeToGenerate)) {
				%>
					DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmt_<%=cid%>, <%=counter-1%>, "<%=dbmsId%>");
				<%
				}
			}
            if(isEnableDebug) {
                %>
                globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                <%
            }            
            %>
			<%if (rejectConnName == null && useBatchSize) { // whether use batch
    		%>
    		pstmt_<%=cid %>.addBatch();
    		nb_line_<%=cid%>++;    		 
			
    		  <%if (useBatchSize && !("").equals(batchSize) && !("0").equals(batchSize)) {
    		  %>
    		  batchSizeCounter_<%=cid%>++;
    		  <%
    		  }%>    		
    		<%
    		}else {    		
    		%>
            try {
                insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
                nb_line_<%=cid%>++;
            } catch(java.lang.Exception e) {
                whetherReject_<%=cid%> = true;
                <%
                if (("true").equals(dieOnError)) {
                    %>
                    throw(e);
                    <%
                } else {
                    if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                        %>
                        <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                        <%
                        for(IMetadataColumn column : columnList) {
                            %>
                            <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                            <%
                        }
                        %>
                        rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
                        <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                        <%
                    } else {
                        %>
                        System.err.print(e.getMessage());
                        <%
                    }
                } 
                %>
            }
            <%
            } // end whether use batch
            %>
            <%
        } else if(("UPDATE").equals(dataAction)) {
            int counterCol = 1;
            for(Column column : colStruct) {
                if(column.isUpdatable()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                    %>
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counterCol, incomingConnName, cid, NORMAL_TYPE)%>
                    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
                        <%
                    }
					if (typeToGenerate.equals("Geometry"))
                        counterCol++;  
                    counterCol++;                   
                }
            }
			if(isDynamic) {
				Column dynamicColumn = getColumn(columnList.get(columnList.size()-1));
				String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
				if("Dynamic".equals(typeToGenerate)) {
				%>
				
					int count_<%=cid%>=DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmt_<%=cid%>, <%=counterCol-1%>, "<%=dbmsId%>");
				<%
				}
			}
    
            for(Column column : colStruct) {
                if(column.isUpdateKey()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                    String dbType = column.getColumn().getType();
                    %>
                    
					<% 
                    //#############for feature:2880 and 6980
                    if(whereSupportNull && column.getColumn().isNullable()) { %>
                    	<%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(column, counterCol, incomingConnName, cid, NORMAL_TYPE)%>
                    <%  
					if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_", "(("+incomingConnName+"."+column.getName()+"==null)?1:0)")%>;
                        <%
                    }
					if (typeToGenerate.equals("Geometry"))
    	                    counterCol++;
                    	counterCol++;
                       }
                     //#############                      
                    %>  
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counterCol, incomingConnName, cid, NORMAL_TYPE, " + count_")%>

                    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
                        <%
                    }
					if (typeToGenerate.equals("Geometry"))
    	                counterCol++;       	
                    counterCol++;
                }
            }
            if(isEnableDebug) {
                %>
                globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                <%
            }            
            %>
            <%if (rejectConnName == null && useBatchSize) { // whether use batch
    		%>
    		pstmt_<%=cid %>.addBatch();
    		nb_line_<%=cid%>++;    		 
			
    		  <%if (useBatchSize && !("").equals(batchSize) && !("0").equals(batchSize)) {
    		  %>
    		  batchSizeCounter_<%=cid%>++;
    		  <%
    		  }%>    		
    		<%
    		}else {    		
    		%>
            try {
                updatedCount_<%=cid%> = updatedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
                nb_line_<%=cid%>++;
            } catch(java.lang.Exception e) {
                whetherReject_<%=cid%> = true;
                <%
                if (("true").equals(dieOnError)) {
                    %>
                    throw(e);
                    <%
                } else {
                    if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                        %>
                        <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                        <%
                        for(IMetadataColumn column : columnList) {
                            %>
                            <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                            <%
                        }
                        %>
                        rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
                        <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                        <%
                    } else {
                        %>
                        System.err.print(e.getMessage());
                        <%
                    }
                } 
                %>
            }
            <%
            } // end whether use batch
            %>
            <%
        } else if (("INSERT_OR_UPDATE").equals(dataAction)) {
            int columnIndex = 1;
            for(Column column : colStruct) {
                if(column.isUpdateKey()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                    String dbType = column.getColumn().getType();
                    %>
					<% 
                    //#############for feature:2880 and 6980
                    if(whereSupportNull && column.getColumn().isNullable()) { %>
                    	<%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(column, columnIndex, incomingConnName, cid, NORMAL_TYPE)%>
                    <%  
                    	columnIndex++;
                       }
                     //#############                      
                    %>
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, columnIndex, incomingConnName, cid, NORMAL_TYPE)%>
                    <%
					if (typeToGenerate.equals("Geometry")) 
                       columnIndex++;
                    columnIndex++;
                }
            }
            %>
    
            java.sql.ResultSet rs_<%=cid%> = pstmt_<%=cid %>.executeQuery();
            int checkCount_<%=cid%> = -1;
            while(rs_<%=cid%>.next()) {
                checkCount_<%=cid%> = rs_<%=cid%>.getInt(1);
            }
            if(checkCount_<%=cid%> > 0) {
                <%
                int counterCol = 1;
                for(Column column : colStruct) {
                    if(column.isUpdatable()) {
                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                        %>
                        <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counterCol, incomingConnName, cid, UPDATE_TYPE)%>
                        <%
                        if(isEnableDebug) {
                            %>
                            query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
                            <%
                        }                        
                        counterCol++;
                    }
                }
				if(isDynamic) {
					Column dynamicColumn = getColumn(columnList.get(columnList.size()-1));
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
					if("Dynamic".equals(typeToGenerate)) {
					%>
					
						int count_<%=cid%>=DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmtUpdate_<%=cid%>, <%=counterCol-1%>, "<%=dbmsId%>");
					<%
					}
				}
                for(Column column : colStruct) {
                    if(column.isUpdateKey()) {
                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                        String dbType = column.getColumn().getType();
                        %>
                        <% 
	                    //#############for feature:2880
	                    if(whereSupportNull && column.getColumn().isNullable()) { %>
	                    	<%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(column, counterCol, incomingConnName, cid, UPDATE_TYPE)%>
	                    <%  
		                     if(isEnableDebug) {
	                        %>
	                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_", "(("+incomingConnName+"."+column.getName()+"==null)?1:0)")%>;
	                        <%
	                    	}
							if (typeToGenerate.equals("Geometry")) 
								counterCol++;
	                    	counterCol++;
	                       }
	                     //#############                      
	                    %>
                        <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counterCol, incomingConnName, cid, UPDATE_TYPE, " + count_")%>
                        <%
                        if(isEnableDebug) {
                            %>
                            query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
                            <%
                        }                        
                        counterCol++;                   
                    }
                }
                if(isEnableDebug) {
                    %>
                    globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                    <%
                }                
                %>
                try {
                    updatedCount_<%=cid%> = updatedCount_<%=cid%> + pstmtUpdate_<%=cid %>.executeUpdate();
                } catch(java.lang.Exception e) {
                    whetherReject_<%=cid%> = true;
                    <%
                    if (("true").equals(dieOnError)) {
                        %>
                        throw(e);
                        <%
                    } else {
                        if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                            %>
                            <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                            <%
                            for(IMetadataColumn column : columnList) {
                                %>
                                <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                                <%
                            }
                            %>
                            rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
                            <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                            <%
                        } else {
                            %>
                            System.err.print(e.getMessage());
                            <%
                        }
                    } 
                    %>
                }
            } else {
                <%
                int counterInsert = 1;
                for(Column columnInsert : colStruct) {
                    if(columnInsert.isInsertable()) {
                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(columnInsert.getColumn().getTalendType(), columnInsert.getColumn().isNullable());
                        %>
                        <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, columnInsert, counterInsert, incomingConnName, cid, INSERT_TYPE)%>
                        <%
                        if(isEnableDebug) {
                            %>
                            query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnInsert, incomingConnName, cid, "query_" ,  counterInsert, "insertSQLSplits_")%>;
                            <%
                        }
						if (typeToGenerate.equals("Geometry")) 
	                        counterInsert++;
                        counterInsert++;
                    }
                }
				if(isDynamic) {
					Column dynamicColumn = getColumn(columnList.get(columnList.size()-1));
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
					if("Dynamic".equals(typeToGenerate)) {
					%>
						DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmtInsert_<%=cid%>, <%=counterInsert-1%>, "<%=dbmsId%>");
					<%
					}
				}
                if(isEnableDebug) {
                    %>
                    globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                    <%
                }                
                %>
                try {
                    insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmtInsert_<%=cid %>.executeUpdate();
                } catch(java.lang.Exception e) {
                    whetherReject_<%=cid%> = true;
                    <%
                    if (("true").equals(dieOnError)) {
                        %>
                        throw(e);
                        <%
                    } else {
                        if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                            %>
                            <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                            <%
                            for(IMetadataColumn column : columnList) {
                                %>
                                <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                                <%
                            }
                            %>
                            rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
                            <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                            <%
                        } else {
                            %>
                            System.err.print(e.getMessage());
                            <%
                        }
                    } 
                    %>
                }
            }
            nb_line_<%=cid%>++;
            <%
        } else if (("UPDATE_OR_INSERT").equals(dataAction)) {
            %>
            int updateFlag_<%=cid%>=0;
            <%
            int counterColUpdate = 1;
            for(Column columnUpdate : colStruct) {
                if(columnUpdate.isUpdatable()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(columnUpdate.getColumn().getTalendType(), columnUpdate.getColumn().isNullable());
                    %>
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, columnUpdate, counterColUpdate, incomingConnName, cid, UPDATE_TYPE)%>
                    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_")%>;
                        <%
                    }
					if (typeToGenerate.equals("Geometry")) 
                        counterColUpdate++;
                    counterColUpdate++;
                }
            }
			if(isDynamic) {
				Column dynamicColumn = getColumn(columnList.get(columnList.size()-1));
				String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
				if("Dynamic".equals(typeToGenerate)) {
				%>
				
					int count_<%=cid%>=DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmtUpdate_<%=cid%>, <%=counterColUpdate-1%>, "<%=dbmsId%>");
				<%
				}
			}
    
            for(Column columnUpdate : colStruct) {
                if(columnUpdate.isUpdateKey()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(columnUpdate.getColumn().getTalendType(), columnUpdate.getColumn().isNullable());
                    String dbType = columnUpdate.getColumn().getType();
                    %>
					<% 
                    //#############for feature:2880 and 6980
                    if(whereSupportNull && columnUpdate.getColumn().isNullable()) { %>
                    	<%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(columnUpdate, counterColUpdate, incomingConnName, cid, UPDATE_TYPE)%>
                    <%  
	                    if(isEnableDebug) {
	                        %>
	                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_", "(("+incomingConnName+"."+columnUpdate.getName()+"==null)?1:0)")%>;
	                        <%
	                    	}
							if (typeToGenerate.equals("Geometry")) 
								counterColUpdate++;
                    	counterColUpdate++;
                       }
                     //#############                      
                    %>
	                    
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, columnUpdate, counterColUpdate, incomingConnName, cid, UPDATE_TYPE, " + count_")%>
                    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_")%>;
                        <%
                    }
					if (typeToGenerate.equals("Geometry")) 
						counterColUpdate++;
                    counterColUpdate++;
                }
            }
            if(isEnableDebug) {
                %>
                globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                <%
            }            
            %>
        
            try {
                updateFlag_<%=cid%>=pstmtUpdate_<%=cid %>.executeUpdate();
                updatedCount_<%=cid%> = updatedCount_<%=cid%>+updateFlag_<%=cid%>;
            } catch(java.lang.Exception e) {
                whetherReject_<%=cid%> = true;
                <%
                if (("true").equals(dieOnError)) {
                    %>
                    throw(e);
                    <%
                } else {
                    if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                        %>
                        <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                        <%
                        for(IMetadataColumn column : columnList) {
                            %>
                            <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                            <%
                        }
                        %>
                        rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
                        <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                        <%
                    } else {
                        %>
                        System.err.print(e.getMessage());
                        <%
                    }
                } 
                %>
            }
            if(updateFlag_<%=cid%> == 0) {
            	<%
            	if(isEnableDebug) {
            	%>
				query_<%=cid%> = new StringBuffer("");
        		<%
        		}
                int counter = 1;
                for(Column column : colStruct) {
                    if(column.isInsertable()) {
                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                        %>
                        <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counter, incomingConnName, cid, INSERT_TYPE)%>
                        <%
                        if(isEnableDebug) {
                            %>
                            query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counter, "insertSQLSplits_")%>;
                            <%
                        }
						if (typeToGenerate.equals("Geometry")) 
                    	    counter++;
                        counter++;
                    }
                }
				if(isDynamic) {
					Column dynamicColumn = getColumn(columnList.get(columnList.size()-1));
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
					if("Dynamic".equals(typeToGenerate)) {
					%>
						DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmtInsert_<%=cid%>, <%=counter-1%>, "<%=dbmsId%>");
					<%
					}
				}
                if(isEnableDebug) {
                    %>
                    globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                    <%
                }                
                %>
                try {
                    insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmtInsert_<%=cid %>.executeUpdate();
                } catch(java.lang.Exception e) {
                    whetherReject_<%=cid%> = true;
                    <%
                    if (("true").equals(dieOnError)) {
                        %>
                        throw(e);
                        <%
                    } else {
                        if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                            %>
                            <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                            <%
                            for(IMetadataColumn column : columnList) {
                                %>
                                <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                                <%
                            }
                            %>
                            rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
                            <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                            <%
                        } else {
                            %>
                            System.err.print(e.getMessage());
                            <%
                        }
                    } 
                    %>
                }
            }
            nb_line_<%=cid%>++;
            <%
        
        } else if (("DELETE").equals(dataAction)) {
            int keyCounter = 1;
            for(Column column : colStruct) {
                if(column.isDeleteKey()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                    String dbType = column.getColumn().getType();
                    %>
					<% 
                    //#############for feature:2880 and 6980
                    if(whereSupportNull && column.getColumn().isNullable()) { %>
                    	<%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(column, keyCounter, incomingConnName, cid, NORMAL_TYPE)%>
                    <%  
	                    if(isEnableDebug) {
	                        %>
	                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , keyCounter, "deleteSQLSplits_", "(("+incomingConnName+"."+column.getName()+"==null)?1:0)")%>;
	                        <%
	                    	}
						if (typeToGenerate.equals("Geometry")) 
                    	    keyCounter++;
                    	 keyCounter++;
                       }
                     //#############                      
                    %>
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, keyCounter, incomingConnName, cid, NORMAL_TYPE)%>
                    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , keyCounter, "deleteSQLSplits_")%>;
                        <%
                    }
					if (typeToGenerate.equals("Geometry")) 
                        keyCounter++;
                    keyCounter++;
                }
            }
            if(isEnableDebug) {
                %>
                globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                <%
            }            
            %>
            <%if (rejectConnName == null && useBatchSize) { // whether use batch
    		%>
    		pstmt_<%=cid %>.addBatch();
			
    		  <%if (useBatchSize && !("").equals(batchSize) && !("0").equals(batchSize)) {
    		  %>
    		  batchSizeCounter_<%=cid%>++;
    		  <%
    		  }%>    		
    		<%
    		}else {    		
    		%>
            try {
                deletedCount_<%=cid%> = deletedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
            } catch(java.lang.Exception e) {
                whetherReject_<%=cid%> = true;
                <%
                if (("true").equals(dieOnError)) {
                    %>
                    throw(e);
                    <%
                } else {
                    if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                        %>
                        <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                        <%
                        for(IMetadataColumn column : columnList) {
                            %>
                            <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                            <%
                        }
                        %>
                        rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
                        <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                        <%
                    } else {
                        %>
                        System.err.print(e.getMessage());
                        <%
                    }
                } 
                %>
            }
            <%
            } // end whether use batch
            %>
            nb_line_<%=cid%>++;
        <%
        }
        
        if(outgoingConns != null && outgoingConns.size() > 0) {
            %>
            if(!whetherReject_<%=cid%>) {
                <%
                for(IConnection outgoingConn : outgoingConns) {
                    if(rejectConnName == null || (rejectConnName != null && !outgoingConn.getName().equals(rejectConnName))) {
                        if(outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {                            
                            %>
                            <%=outgoingConn.getName()%> = new <%=outgoingConn.getName()%>Struct();
                            <%
                            for(IMetadataColumn column : columnList) {
                                %>
                                <%=outgoingConn.getName()%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                                <%                  
                            }
                        }
                    }
                }
            %>
            }
        <%
        }   
        
		//////////batch execute by batch size///////
    	if (useBatchSize&& (rejectConnName==null)) {
    		if(!("").equals(batchSize) && !("0").equals(batchSize)) {
    		%>
    			if ( batchSize_<%=cid%> <= batchSizeCounter_<%=cid%>) {                
                <%if ( (rejectConnName==null) && (("INSERT").equals(dataAction) || ("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction))) {
                %>                                                
                try {
						int countSum_<%=cid%> = 0;
						for(int countEach_<%=cid%>: pstmt_<%=cid %>.executeBatch()) {
							countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
						}                	
				    	<%if (("INSERT").equals(dataAction)) {
				    	%>
				    		insertedCount_<%=cid%> += countSum_<%=cid%>; 
				    	<%
				    	}else if (("UPDATE").equals(dataAction)) {
				    	%>
				    		updatedCount_<%=cid%> += countSum_<%=cid%>;
				    	<%
				    	}else if (("DELETE").equals(dataAction)) {
				    	%>
				    	    deletedCount_<%=cid%> += countSum_<%=cid%>;
				    	<%
				    	}%>                         	    	
            	    	batchSizeCounter_<%=cid%> = 0;             	                	                	
                }catch (java.sql.BatchUpdateException e){
                                
                                
             		<%@ include file="../templates/Logging/LogBatchUpdateExpection.javajet"%>

	  
                
                	<%if(("true").equals(dieOnError)) {
                	%>
                		throw(e);
                	<%
                	}else {
                	%>
                	int countSum_<%=cid%> = 0;
					for(int countEach_<%=cid%>: e.getUpdateCounts()) {
						countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
					}
					<%if (("INSERT").equals(dataAction)) {
			    	%>
			    		insertedCount_<%=cid%> += countSum_<%=cid%>; 
			    	<%
			    	}else if (("UPDATE").equals(dataAction)) {
			    	%>
			    		updatedCount_<%=cid%> += countSum_<%=cid%>;
			    	<%
			    	}else if (("DELETE").equals(dataAction)) {
			    	%>
			    	    deletedCount_<%=cid%> += countSum_<%=cid%>;
			    	<%
			    	}%>
                	System.err.println(e.getMessage());
                	<%
                	}%>
                }
                <%
                }%>    			
    			
    			
    			
    			}
    		<%	
    		}
    	
    	}
        ////////////commit every////////////
		if(!"true".equals(useExistingConn)) {
    		if(!("").equals(commitEvery) && !("0").equals(commitEvery)) {
    		    %>
    		    commitCounter_<%=cid%>++;            
                if(commitEvery_<%=cid%> <= commitCounter_<%=cid%>) {
                
                <%if ((rejectConnName==null && useBatchSize) && (("INSERT").equals(dataAction) || ("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction)) ) {
                %>
                try {
                		int countSum_<%=cid%> = 0;
						for(int countEach_<%=cid%>: pstmt_<%=cid %>.executeBatch()) {
							countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
						}
            	    	<%if (("INSERT").equals(dataAction)) {
            	    	%>
            	    		insertedCount_<%=cid%> += countSum_<%=cid%>;
            	    	<%
            	    	}else if (("UPDATE").equals(dataAction)) {
            	    	%>            	    		
            	    		updatedCount_<%=cid%> += countSum_<%=cid%>;
            	    	<%
            	    	}else if (("DELETE").equals(dataAction)) {
            	    	%>
            	    	    deletedCount_<%=cid%> += countSum_<%=cid%>;
            	    	<%
            	    	}%>            	    
                }catch (java.sql.BatchUpdateException e){
                              
               	<%@ include file="../templates/Logging/LogBatchUpdateExpection.javajet"%>
        
                
                	<%if(("true").equals(dieOnError)) {
                	%>
						throw(e);
                	<%
                	}else {
                	%>
                		int countSum_<%=cid%> = 0;
						for(int countEach_<%=cid%>: e.getUpdateCounts()) {
							countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
						}
						<%if (("INSERT").equals(dataAction)) {
				    	%>
				    		insertedCount_<%=cid%> += countSum_<%=cid%>; 
				    	<%
				    	}else if (("UPDATE").equals(dataAction)) {
				    	%>
				    		updatedCount_<%=cid%> += countSum_<%=cid%>;
				    	<%
				    	}else if (("DELETE").equals(dataAction)) {
				    	%>
				    	    deletedCount_<%=cid%> += countSum_<%=cid%>;
				    	<%
				    	}%>
                        System.out.println(e.getMessage());
                	<%
                	}%>
                
                }            	                              
                <%
                }%>
                	conn_<%=cid%>.commit();                
                	commitCounter_<%=cid%>=0;
                }	
                <%
    		}
    	}
        
        
    }
    %>
