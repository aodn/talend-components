<%@ jet 
imports="
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.process.IConnection
	java.util.List
" 
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	
	String cid = node.getUniqueName();
	
	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
	
	String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
	
	String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
	
	String dbschema = ElementParameterParser.getValue(node, "__SCHEMA_DB__");
	
	String tableName = ElementParameterParser.getValue(node,"__TABLE__");
	
	boolean useSpatialOptions = ("true").equals(ElementParameterParser.getValue(node,"__USE_SPATIAL_OPTIONS__"));
	
	boolean createSpatialIndex = ("true").equals(ElementParameterParser.getValue(node,"__SPATIAL_INDEX__"));
	
	boolean createGeometryColumns = ("true").equals(ElementParameterParser.getValue(node,"__GEOMETRY_COLUMNS__"));
    
	boolean useBatchSize = ("true").equals(ElementParameterParser.getValue(node,"__USE_BATCH_SIZE__"));
	
	String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
	
	String rejectConnName = null;
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    if(rejectConns != null && rejectConns.size() > 0) {
        IConnection rejectConn = rejectConns.get(0);
        rejectConnName = rejectConn.getName();
    }
    
    if(createGeometryColumns && useSpatialOptions){
		%>
		java.sql.Statement stmtCreateGeoColumns_<%=cid%> = conn_<%=cid%>.createStatement();
		
		// Delete geometry columns entry if already exists. 
		String deleteGeometryColumns_<%=cid %> = "DELETE FROM geometry_columns WHERE f_table_name='" + 
												<%=tableName %> + "' AND f_table_schema='" + <%=dbschema %> +"'";
		stmtCreateGeoColumns_<%=cid%>.execute(deleteGeometryColumns_<%=cid %>);
			
		// Create new entry in geometry columns table	
        String insertGeometryColumns_<%=cid %> = "INSERT INTO geometry_columns VALUES ('', '"+ <%=dbschema %> +"', '"+ 
        										<%=tableName %> +"','"+ geometryColumnName_<%=cid %> +
        										"', "+dimension_<%=cid %>+", "+ SRID_<%=cid %> +", 'GEOMETRY')";
        stmtCreateGeoColumns_<%=cid%>.execute(insertGeometryColumns_<%=cid %>);
        
        stmtCreateGeoColumns_<%=cid%>.close();
		<%
	}
	if(createSpatialIndex && useSpatialOptions){
		%>
    	java.sql.Statement stmtCreateIndex_<%=cid%> = conn_<%=cid%>.createStatement();
		// Drop spatial index if exists
		String dropIndex_<%=cid %> = "DROP INDEX IF EXISTS \""+ tableName_<%=cid%> +"_geo_index\"";
		stmtCreateIndex_<%=cid%>.execute(dropIndex_<%=cid %>);
		
		// Create spatial index using GIST on geometry columns
		String createIndex_<%=cid %> = "CREATE INDEX \""+ <%=tableName %> +"_geo_index\" ON \""+ tableName_<%=cid%> +
								 "\" USING GIST (\"" + geometryColumnName_<%=cid %> +"\")";
        stmtCreateIndex_<%=cid%>.execute(createIndex_<%=cid %>);
       stmtCreateIndex_<%=cid%>.close();
		<%
	}
    

	
    if(("INSERT_OR_UPDATE").equals(dataAction)) {
        %>
        if(pstmtUpdate_<%=cid%> != null){

            pstmtUpdate_<%=cid %>.close();
            
        } 
        if(pstmtInsert_<%=cid %> != null){

            pstmtInsert_<%=cid %>.close();
            
        }
        if(pstmt_<%=cid %> != null) {

            pstmt_<%=cid %>.close();
            
        }        
        <%
    } else if(("UPDATE_OR_INSERT").equals(dataAction)) {
        %>
        if(pstmtUpdate_<%=cid%> != null){

            pstmtUpdate_<%=cid %>.close();
            
        } 
        if(pstmtInsert_<%=cid %> != null){

            pstmtInsert_<%=cid %>.close();
            
        }        
        <%
    } else {
        %>
		<%if ((rejectConnName==null && useBatchSize) && (("INSERT").equals(dataAction) || ("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction))) {
	    %>                
	    try {
				int countSum_<%=cid%> = 0;
				if (pstmt_<%=cid %> != null) {
					for(int countEach_<%=cid%>: pstmt_<%=cid %>.executeBatch()) {
						countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
					}                	
				}
		    	<%if (("INSERT").equals(dataAction)) {
		    	%>
		    		insertedCount_<%=cid%> += countSum_<%=cid%>; 
		    	<%
		    	}else if (("UPDATE").equals(dataAction)) {
		    	%>
		    		updatedCount_<%=cid%> += countSum_<%=cid%>;
		    	<%
		    	}else if (("DELETE").equals(dataAction)) {
		    	%>
		    	    deletedCount_<%=cid%> += countSum_<%=cid%>;
		    	<%
		    	}%>            	    
	    }catch (java.sql.BatchUpdateException e){
	  	 
          	<%@ include file="../templates/Logging/LogBatchUpdateExpection.javajet"%>
	  		  
	    
	    	<%if(("true").equals(dieOnError)) {
	    	%>
	    		throw(e);
	    	<%
	    	}else {
	    	%>
	    	int countSum_<%=cid%> = 0;
			for(int countEach_<%=cid%>: e.getUpdateCounts()) {
				countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
			}
			<%if (("INSERT").equals(dataAction)) {
	    	%>
	    		insertedCount_<%=cid%> += countSum_<%=cid%>; 
	    	<%
	    	}else if (("UPDATE").equals(dataAction)) {
	    	%>
	    		updatedCount_<%=cid%> += countSum_<%=cid%>;
	    	<%
	    	}else if (("DELETE").equals(dataAction)) {
	    	%>
	    	    deletedCount_<%=cid%> += countSum_<%=cid%>;
	    	<%
	    	}%>
	    	System.out.println(e.getMessage());
	    	<%
	    	}%>                	
		}                                  
	    <%
	    }%>   
        if(pstmt_<%=cid %> != null) {

            pstmt_<%=cid %>.close();
            
        }        
        <%
    }   
    %>

    <%
	if(!("true").equals(useExistingConn))
	{
		if(!("").equals(commitEvery) && !("0").equals(commitEvery))
		{
			%>
			conn_<%=cid%>.commit();
            <%
		}
		%>	
    	conn_<%=cid%> .close();
    	<%
	}
    %>

	nb_line_deleted_<%=cid%>=nb_line_deleted_<%=cid%>+ deletedCount_<%=cid%>;
	nb_line_update_<%=cid%>=nb_line_update_<%=cid%> + updatedCount_<%=cid%>;
	nb_line_inserted_<%=cid%>=nb_line_inserted_<%=cid%> + insertedCount_<%=cid%>;
	nb_line_rejected_<%=cid%>=nb_line_rejected_<%=cid%> + rejectedCount_<%=cid%>;

    globalMap.put("<%=cid %>_NB_LINE",nb_line_<%=cid%>);
    globalMap.put("<%=cid %>_NB_LINE_UPDATED",nb_line_update_<%=cid%>);
    globalMap.put("<%=cid %>_NB_LINE_INSERTED",nb_line_inserted_<%=cid%>);
    globalMap.put("<%=cid %>_NB_LINE_DELETED",nb_line_deleted_<%=cid%>);
    globalMap.put("<%=cid %>_NB_LINE_REJECTED",nb_line_rejected_<%=cid%>);
