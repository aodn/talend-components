<%@ jet 
    imports="
    	java.util.Iterator
        java.util.List 
        java.util.Map
        java.util.Set 
        java.util.LinkedHashMap
        org.talend.core.model.process.INode 
        org.talend.core.model.process.ElementParameterParser 
        org.talend.core.model.metadata.IMetadataTable 
        org.talend.core.model.metadata.IMetadataColumn 
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.EConnectionType
        org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
    " 
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

// Retrieve component properties
String filename = ElementParameterParser.getValue(node, "__FILENAME__");
List<Map<String, String>> columnMappingOverrides = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__COLUMN_MAPPINGS__");
String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");

// Get list of column names used in connections and mapped variable names 

%>

java.util.Map<String, String> columnVariableNames_<%=cid %> = new java.util.LinkedHashMap<String, String>();

<%
List< ? extends IConnection> conns = node.getOutgoingConnections();

for (int i=0; i < conns.size(); i++) {
	IConnection conn = conns.get(i);

    if ((conn.getLineStyle().equals(EConnectionType.FLOW_MAIN)	)||(conn.getLineStyle().equals(EConnectionType.FLOW_REF))) {
    	IMetadataTable connMetadata = conn.getMetadataTable();
    	
        List<IMetadataColumn> listColumns = connMetadata.getListColumns();
        
        for (IMetadataColumn column : listColumns) {
			        	
        	String columnName = column.getLabel();
        	
        	// determine mapping to variable name 
        	
			String variableName = "\"" + columnName + "\"";
			
			for (Map<String, String> columnMapOverride : columnMappingOverrides) {
				if (columnMapOverride.get("COLUMN").equals(columnName)) {
					variableName = columnMapOverride.get("VARIABLE");
					break;
				} 
			}
			
			// skip null mappings
			
			if (variableName == null) continue;
			
			// Update column name/variable name mappings
			 
			%>
			if (<%=variableName %> != null && !<%=variableName %>.trim().equals("")) { 
       			columnVariableNames_<%=cid %>.put("<%=columnName %>", <%=variableName %>);
       		}
       		<%
        }
    }
}

// Begin component processing

%>
int nbFeature_<%=cid %> = 0;

String filename_<%=cid %> = <%=filename %>;

<% if (("false").equals(dieOnError)) {%>
	boolean error_<%=cid %> = false;
	String errorTrace_<%=cid %> = "";
<% } %>

ucar.nc2.NetcdfFile ncfile_<%=cid %> = null;

try {
	ncfile_<%=cid %> = ucar.nc2.dataset.NetcdfDataset.openFile(filename_<%=cid %>, null);
			
	// Create readers for each variable.  Readers return the value of the variable for particular index values
	
	java.util.Map<String, au.org.emii.talend.dap.reader.NetcdfReader> readers_<%=cid %> = new java.util.LinkedHashMap<String, au.org.emii.talend.dap.reader.NetcdfReader>();
	
	for (String variableName : columnVariableNames_<%=cid %>.values()) {
		readers_<%=cid %>.put(variableName, new au.org.emii.talend.dap.reader.NetcdfReader(ncfile_<%=cid %>.findVariable(variableName)));
	}
		
	java.util.Map<String,java.util.Iterator<java.util.Set<au.org.emii.talend.dap.IndexValue>>> connIterators_<%=cid %> = new java.util.LinkedHashMap<String, java.util.Iterator<java.util.Set<au.org.emii.talend.dap.IndexValue>>>();
	 
	au.org.emii.talend.dap.IndexRangesBuilder indexRangesBuilder_<%=cid %>;
				
<%

// Create iterator for each connection - iterate over all possible index combinations for variables to be output on connection

for (int i=0; i < conns.size(); i++) {
	IConnection conn = conns.get(i);
	
	String connName = conn.getName();

    if ((conn.getLineStyle().equals(EConnectionType.FLOW_MAIN)	)||(conn.getLineStyle().equals(EConnectionType.FLOW_REF))) {
    	IMetadataTable connMetadata = conn.getMetadataTable();

%>

		indexRangesBuilder_<%=cid %> = new au.org.emii.talend.dap.IndexRangesBuilder();
		
<%    	
        List<IMetadataColumn> listColumns = connMetadata.getListColumns();
        
        for (IMetadataColumn column : listColumns) {
        	String columnName = column.getLabel();
%>
        	String <%=cid %>_variableName_<%=connName %>_<%=columnName %> = columnVariableNames_<%=cid %>.get("<%=column.getLabel() %>");
        	
        	if (<%=cid %>_variableName_<%=connName %>_<%=columnName %> != null) {
				indexRangesBuilder_<%=cid %>.addDimensions(ncfile_<%=cid %>.findVariable(<%=cid %>_variableName_<%=connName %>_<%=columnName %>));
			}
<%        	
        }
%>

		connIterators_<%=cid %>.put("<%=connMetadata.getLabel() %>", indexRangesBuilder_<%=cid %>.getIterator());
		
<%		
    }
}
%>
		for (String connName_<%=cid %> : connIterators_<%=cid %>.keySet()) {
			java.util.Iterator<java.util.Set<au.org.emii.talend.dap.IndexValue>> connIterator_<%=cid %> = connIterators_<%=cid %>.get(connName_<%=cid %>);
			
			while (connIterator_<%=cid %>.hasNext()) {
				java.util.Set<au.org.emii.talend.dap.IndexValue> indexValues_<%=cid %> = connIterator_<%=cid %>.next();

