<%@ jet 
    imports="
        java.util.Iterator
        java.util.List 
        java.util.Map
        java.util.Set 
        java.util.LinkedHashMap
        org.talend.core.model.process.INode 
        org.talend.core.model.process.ElementParameterParser 
        org.talend.core.model.metadata.IMetadataTable 
        org.talend.core.model.metadata.IMetadataColumn 
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.EConnectionType
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.core.model.metadata.types.JavaTypesManager
    " 
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

// Retrieve component properties
String filename = ElementParameterParser.getValue(node, "__FILENAME__");
List<Map<String, String>> columnMappingOverrides = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__COLUMN_MAPPINGS__");

// Enhanced dataset options
String scaleMissing = ElementParameterParser.getValue(node, "__SCALE_MISSING__");
String convertEnums = ElementParameterParser.getValue(node, "__CONVERT_ENUMS__");

// Missing value options
String isFillerMissing = ElementParameterParser.getValue(node, "__FILLER_MISSING__");
String isInvalidMissing = ElementParameterParser.getValue(node, "__INVALID_MISSING__");
String isMissingMissing = ElementParameterParser.getValue(node, "__MISSING_MISSING__");
String nullValueHandling = ElementParameterParser.getValue(node, "__MISSING_VALUE_HANDLING__");

// If we want to map by variable axis type then we need to build coordinate systems

boolean buildCoordSystems = false;

for (Map<String, String> columnMapOverride : columnMappingOverrides) {
    if (columnMapOverride.get("TYPE").equals("AXIS_TYPE")) {
        buildCoordSystems = true;
        break;
    }
}

// Get list of column names used in connections and mapped variables/dimensions 

%>

java.util.Map<String, String> columnNameMapping_<%=cid %> = new java.util.LinkedHashMap<String, String>();
java.util.Map<String, String> columnTypeMapping_<%=cid %> = new java.util.LinkedHashMap<String, String>();

<%
List< ? extends IConnection> conns = node.getOutgoingConnections();

for (int i=0; i < conns.size(); i++) {
    IConnection conn = conns.get(i);

    if ((conn.getLineStyle().equals(EConnectionType.FLOW_MAIN)    )||(conn.getLineStyle().equals(EConnectionType.FLOW_REF))) {
        IMetadataTable connMetadata = conn.getMetadataTable();
        
        List<IMetadataColumn> listColumns = connMetadata.getListColumns();
        
        for (IMetadataColumn column : listColumns) {
                        
            String columnName = column.getLabel();
            
            // determine column to NetCDF dimension/variable mapping
            
            String name = "\"" + columnName + "\"";
            String type = column.isKey()?"DIMENSION":"VARIABLE";
            
            for (Map<String, String> columnMapOverride : columnMappingOverrides) {
                if (columnMapOverride.get("COLUMN").equals(columnName)) {
                    name = columnMapOverride.get("VARIABLE").equals("")?name:columnMapOverride.get("VARIABLE");
                    type = columnMapOverride.get("TYPE");
                    break;
                } 
            }
            
            // Update column name/variable/dimension name mappings
             
            %>
            if (<%=name %> != null && !<%=name %>.trim().equals("")) { 
                   columnNameMapping_<%=cid %>.put("<%=columnName %>", <%=name %>);
                   columnTypeMapping_<%=cid %>.put("<%=columnName %>", "<%=type %>");
               }
               <%
        }
    }
}

// Begin component processing

%>
int nbFeature_<%=cid %> = 0;

String filename_<%=cid %> = <%=filename %>;

<%  if (scaleMissing.equals("true")) { %>
ucar.nc2.dataset.NetcdfDataset.setFillValueIsMissing(<%=isFillerMissing.equals("true") %>);
ucar.nc2.dataset.NetcdfDataset.setInvalidDataIsMissing(<%=isInvalidMissing.equals("true") %>);
ucar.nc2.dataset.NetcdfDataset.setMissingDataIsMissing(<%=isMissingMissing.equals("true") %>);
ucar.nc2.dataset.NetcdfDataset.setUseNaNs(<%=nullValueHandling.equals("NANS") %>);
<%  } %>

ucar.nc2.dataset.NetcdfDataset ncDataset_<%=cid %> = null;

try {
<%  if (scaleMissing.equals("false") && convertEnums.equals("false") && !buildCoordSystems) { %>
    ncDataset_<%=cid %> = ucar.nc2.dataset.NetcdfDataset.openDataset(filename_<%=cid %>, false, null);
<%  } else { %>
    java.util.Set<ucar.nc2.dataset.NetcdfDataset.Enhance> enhanceMode_<%=cid %> = new java.util.HashSet<ucar.nc2.dataset.NetcdfDataset.Enhance>();
<%
        if (scaleMissing.equals("true")) { %>
    enhanceMode_<%=cid %>.add(ucar.nc2.dataset.NetcdfDataset.Enhance.ScaleMissing);
<%      }
 
        if (convertEnums.equals("true")) { %>
    enhanceMode_<%=cid %>.add(ucar.nc2.dataset.NetcdfDataset.Enhance.ConvertEnums);
<%      } %>

<%      if (buildCoordSystems) { %>
    enhanceMode_<%=cid %>.add(ucar.nc2.dataset.NetcdfDataset.Enhance.CoordSystems);
<%      } %>

    ncDataset_<%=cid %> = ucar.nc2.dataset.NetcdfDataset.openDataset(filename_<%=cid %>, enhanceMode_<%=cid %>, 0, null, null);
<%  } %>
            
    // Build maps of column name to variable and column name to variable reader where applicable
    // Readers return the value of the variable for particular index value combinations
    
    java.util.Map<String, ucar.nc2.Variable> columnVariableMapping_<%=cid %> = new java.util.LinkedHashMap<String, ucar.nc2.Variable>();
    java.util.Map<String, au.org.emii.netcdf.iterator.reader.NetcdfReader> readers_<%=cid %> = new java.util.LinkedHashMap<String, au.org.emii.netcdf.iterator.reader.NetcdfReader>();

    for (java.util.Map.Entry<String, String> typeMapping : columnTypeMapping_<%=cid %>.entrySet()) {
        String columnName = typeMapping.getKey();
        String mappingType = typeMapping.getValue();
        String mappingValue = columnNameMapping_<%=cid %>.get(columnName);

        ucar.nc2.Variable variable = null;

        if (mappingType.equals("VARIABLE")||mappingType.equals("DIMENSION")) {
            // column mapped to variable by name
            variable = ncDataset_<%=cid %>.findVariable(mappingValue);
        } else if (mappingType.equals("AXIS_TYPE")) {
            // column mapped to variable by axis type
            variable = ncDataset_<%=cid %>.findCoordinateAxis(ucar.nc2.constants.AxisType.valueOf(mappingValue));
        }

        if (variable == null) continue;

        columnVariableMapping_<%=cid %>.put(columnName, variable);

        if (!mappingType.equals("DIMENSION")) {
            readers_<%=cid %>.put(mappingValue, new au.org.emii.netcdf.iterator.reader.NetcdfReader(variable));
        }
    }
        
    java.util.Map<String,java.util.Iterator<java.util.Set<au.org.emii.netcdf.iterator.IndexValue>>> connIterators_<%=cid %> = new java.util.LinkedHashMap<String, java.util.Iterator<java.util.Set<au.org.emii.netcdf.iterator.IndexValue>>>();
     
    au.org.emii.netcdf.iterator.IndexRangesBuilder indexRangesBuilder_<%=cid %>;
                
<%

// Create iterator for each connection - iterate over all possible index combinations for variables to be output on connection

for (int i=0; i < conns.size(); i++) {
    IConnection conn = conns.get(i);
    
    String connName = conn.getName();

    if ((conn.getLineStyle().equals(EConnectionType.FLOW_MAIN)    )||(conn.getLineStyle().equals(EConnectionType.FLOW_REF))) {
        IMetadataTable connMetadata = conn.getMetadataTable();

%>

        indexRangesBuilder_<%=cid %> = new au.org.emii.netcdf.iterator.IndexRangesBuilder();
        
<%        
        List<IMetadataColumn> listColumns = connMetadata.getListColumns();
        
        for (IMetadataColumn column : listColumns) {
            String columnName = column.getLabel();
            String ttg = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
%>
            String <%=cid %>_name_<%=connName %>_<%=columnName %> = columnNameMapping_<%=cid %>.get("<%=columnName %>");
            String <%=cid %>_type_<%=connName %>_<%=columnName %> = columnTypeMapping_<%=cid %>.get("<%=columnName %>");
            
            if (!<%=cid %>_type_<%=connName %>_<%=columnName %>.equals("DIMENSION") && <%=cid %>_name_<%=connName %>_<%=columnName %> != null) {
                ucar.nc2.Variable variable = columnVariableMapping_<%=cid %>.get("<%=columnName %>");
                if (variable != null) {

                <%  if (ttg.equals("String")) { %>
                    indexRangesBuilder_<%=cid %>.addStringDimensions(variable);
                <%  } else { %>
                    indexRangesBuilder_<%=cid %>.addDimensions(variable);
                <%  } %>

                }
            }
<%            
        }
%>

        connIterators_<%=cid %>.put("<%=connMetadata.getLabel() %>", indexRangesBuilder_<%=cid %>.getIterator());
        
<%        
    }
}
%>
        for (String connName_<%=cid %> : connIterators_<%=cid %>.keySet()) {
            java.util.Iterator<java.util.Set<au.org.emii.netcdf.iterator.IndexValue>> connIterator_<%=cid %> = connIterators_<%=cid %>.get(connName_<%=cid %>);
            
            while (connIterator_<%=cid %>.hasNext()) {
                java.util.Set<au.org.emii.netcdf.iterator.IndexValue> indexValues_<%=cid %> = connIterator_<%=cid %>.next();

