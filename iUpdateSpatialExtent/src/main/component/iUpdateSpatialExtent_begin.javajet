<%@ jet
imports="
    org.talend.core.model.process.INode
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
"
%>

    <%@ include file="../templates/Geonetwork/MetadataUpdater.javajet"%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String dbhost = ElementParameterParser.getValue(node, "__HOST__");
String dbport = ElementParameterParser.getValue(node, "__PORT__");
String dbname = ElementParameterParser.getValue(node, "__DBNAME__");
String dbschema = ElementParameterParser.getValue(node, "__SCHEMA_DB__");
String dbuser = ElementParameterParser.getValue(node, "__USER__");
String dbpwd = ElementParameterParser.getValue(node, "__PASS__");
String dbtable = ElementParameterParser.getValue(node, "__TABLE__");
String dbcol = ElementParameterParser.getValue(node, "__COLUMN__");

String resolution = ElementParameterParser.getValue(node, "__RESOLUTION__");

String gnServiceUrl = ElementParameterParser.getValue(node, "__GN_SERVICE_URL__");
String gnUsername = ElementParameterParser.getValue(node, "__GN_USERNAME__");
String gnPassword = ElementParameterParser.getValue(node, "__GN_PASSWORD__");

String uuid = ElementParameterParser.getValue(node, "__UUID__");

String jobName = ElementParameterParser.getValue(node, "__JOBNAME__");
String harvestType = ElementParameterParser.getValue(node, "__HARVEST_TYPE__");

%>

    boolean requireUpdate_<%=cid%> = false;

    {
    java.sql.Connection conn_<%=cid%> = null;
    java.sql.PreparedStatement pstmt_<%=cid %> = null;
    java.sql.ResultSet rs_<%=cid %> = null;

    try {
        <%
        String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");

        if(("true").equals(useExistingConn)) {
            String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
            String conn = "conn_" + connection;
        %>
            conn_<%=cid%> = (java.sql.Connection)globalMap.get("<%=conn%>");
        <% } else { %>
            java.lang.Class.forName("org.postgresql.Driver");
            String url_<%=cid %> = "jdbc:postgresql://"+<%=dbhost%>+":"+<%=dbport%>+"/"+<%=dbname%>;
            String dbUser_<%=cid %> = <%=dbuser%>;
            String dbPwd_<%=cid %> = <%=dbpwd%>;
            conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid %>, dbUser_<%=cid%>, dbPwd_<%=cid%>);
        <% } %>


        // has any resource changed during the harvest
        String changeQuery = ""
          + " select exists ("
          + "   select 1"
          + "   from " + <%=dbschema%> + ".indexed_file if"
          + "   left join " + <%=dbschema%> + ".file_harvest fh on if.id = fh.file_id"
          + "   where fh.last_change_run = (select last_run_no from " + <%=dbschema%> + ".index_job where name = ? )"
          + "   and fh.harvest_type = ?"
          + " ) as changed"
        ;

        pstmt_<%=cid%> = conn_<%=cid%>
          .prepareStatement(changeQuery);

        String jobName_<%=cid%> = <%=jobName%>;
        String harvestType_<%=cid%> = <%=harvestType%>;

        pstmt_<%=cid%>.setString(1, jobName_<%=cid%>);
        pstmt_<%=cid%>.setString(2, harvestType_<%=cid%>);

        rs_<%=cid %> = pstmt_<%=cid %>.executeQuery();
        rs_<%=cid %>.next();
        requireUpdate_<%=cid%> = rs_<%=cid %>.getBoolean("changed");
    }
    finally {
        if (rs_<%=cid %> != null) rs_<%=cid %>.close();
        if (pstmt_<%=cid %> != null) pstmt_<%=cid %>.close();

        <% if(("false").equals(useExistingConn)) { %>
            if (conn_<%=cid%> != null) conn_<%=cid%>.close();
        <% } %>
    }
    }

    System.out.format( "* iSpatialExtend - require update %b\n", requireUpdate_<%=cid%> );

    if(requireUpdate_<%=cid%>)
    {
        String boundingPolygon_<%=cid%> = null;

        java.sql.Connection conn_<%=cid%> = null;
        java.sql.Statement stmt_<%=cid %> = null;
        java.sql.ResultSet rs_<%=cid %> = null;

        try {
            <%
            //String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");

            if(("true").equals(useExistingConn)) {
                String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
                String conn = "conn_" + connection; %>
                conn_<%=cid%> = (java.sql.Connection)globalMap.get("<%=conn%>");
            <% } else { %>
                java.lang.Class.forName("org.postgresql.Driver");
                String url_<%=cid %> = "jdbc:postgresql://"+<%=dbhost%>+":"+<%=dbport%>+"/"+<%=dbname%>;
                String dbUser_<%=cid %> = <%=dbuser%>;
                String dbPwd_<%=cid %> = <%=dbpwd%>;
                conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid %>, dbUser_<%=cid%>, dbPwd_<%=cid%>);
            <% } %>

            // Get bounding polygon from postgres (requires BoundingPolygonAsGml3 function to be installed)

            String query = "select BoundingPolygonAsGml3('" + <%=dbschema%> + "','" + <%=dbtable%> + "','" + <%=dbcol%> + "'," + <%=resolution%> + ")";
            stmt_<%=cid %> = conn_<%=cid %>.createStatement();
            rs_<%=cid %> = stmt_<%=cid %>.executeQuery(query);
            rs_<%=cid %>.next();
            boundingPolygon_<%=cid%> = rs_<%=cid %>.getString("BoundingPolygonAsGml3");
        } finally {
            if (rs_<%=cid %> != null) rs_<%=cid %>.close();
            if (stmt_<%=cid %> != null) stmt_<%=cid %>.close();

            <%    if(("false").equals(useExistingConn)) { %>
                if (conn_<%=cid%> != null) conn_<%=cid%>.close();
            <% } %>
        }

        // Turn it into an XML document (Postgis doesn't include the gml namespace declaration in the returned xml
        // so we add a root element containing the required declaration)

        StringBuilder postgisWrapper_<%=cid%> = new StringBuilder("<postgisResult xmlns:gml=\"http://www.opengis.net/gml\">");
        postgisWrapper_<%=cid%>.append(boundingPolygon_<%=cid%>);
        postgisWrapper_<%=cid%>.append("</postgisResult>");
        String wrappedGml_<%=cid%> = postgisWrapper_<%=cid%>.toString();

        org.jdom.input.SAXBuilder saxBuilder_<%=cid%> = new org.jdom.input.SAXBuilder();
        org.jdom.Document doc_<%=cid%> = saxBuilder_<%=cid%>.build(new java.io.StringReader(wrappedGml_<%=cid%>));
        
        // Get srsName for use in creating gmd:polygon's
        
        org.jdom.xpath.XPath srsElementXpath_<%=cid%> = org.jdom.xpath.XPath.newInstance("//*[@srsName]");
        org.jdom.Element srsNameElement_<%=cid%> = (org.jdom.Element) srsElementXpath_<%=cid%>.selectSingleNode(doc_<%=cid%>);
        String srsName_<%=cid%> = srsNameElement_<%=cid%>.getAttributeValue("srsName");

        // Convert included polygons into a list of iso19115/iso19139 gmd:geographicElements

        List<org.jdom.Element> geographicElements_<%=cid%> = new java.util.ArrayList<org.jdom.Element>();

        org.jdom.xpath.XPath xpath_<%=cid%> = org.jdom.xpath.XPath.newInstance("//gml:Polygon");
        xpath_<%=cid%>.addNamespace(org.jdom.Namespace.getNamespace("gml", "http://www.opengis.net/gml"));
        List<org.jdom.Element> polygons_<%=cid%> = (List<org.jdom.Element>) xpath_<%=cid%>.selectNodes(doc_<%=cid%>);

        org.jdom.Namespace gmdNs = org.jdom.Namespace.getNamespace("gmd", "http://www.isotc211.org/2005/gmd");

        for (org.jdom.Element polygon : polygons_<%=cid%>) {
            polygon.setAttribute("srsName", srsName_<%=cid%>);
            org.jdom.Element polygonElement = new org.jdom.Element("polygon", gmdNs).addContent((org.jdom.Element) polygon.clone());;
            org.jdom.Element exBoundingPolygonElement = new org.jdom.Element("EX_BoundingPolygon", gmdNs).addContent(polygonElement);
            org.jdom.Element geographicElement = new org.jdom.Element("geographicElement", gmdNs).addContent(exBoundingPolygonElement);
            geographicElements_<%=cid%>.add(geographicElement);
        }

        // Connect to Geonetwork

        it.geosolutions.geonetwork.GNClient geonetworkClient_<%= cid %> = new it.geosolutions.geonetwork.GNClient(
          <%= gnServiceUrl %>,
          <%= gnUsername %>,
          <%= gnPassword %>
        );

        // Fetch specified metadata record

        org.jdom.Document metadata_<%= cid %> = new org.jdom.Document(
            geonetworkClient_<%= cid %>.get(<%= uuid %>)
        );

        // Update metadata mecord

        MetadataUpdater metadataUpdater = new MetadataUpdater();

        List<org.jdom.Namespace> namespaces_<%= cid %> = new java.util.ArrayList<org.jdom.Namespace>();
        namespaces_<%= cid %>.add(gmdNs);

        metadataUpdater.removeNodes(metadata_<%= cid %>, namespaces_<%= cid %>, "//gmd:EX_Extent", "geographicElement", gmdNs);
        metadataUpdater.addNodes(metadata_<%= cid %>,  namespaces_<%= cid %>, "//gmd:EX_Extent", geographicElements_<%=cid%>);

        // Post updated record back to Geonetwork

        geonetworkClient_<%= cid %>.updateMetadata(<%= uuid %>, metadata_<%= cid %>.getRootElement());
    }
