<%@ jet 
    imports="
        org.talend.core.model.process.INode 
        org.talend.core.model.process.ElementParameterParser 
        org.talend.core.model.metadata.IMetadataTable 
        org.talend.core.model.metadata.IMetadataColumn 
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.EConnectionType
        org.talend.designer.codegen.config.CodeGeneratorArgument
        java.util.List 
        org.talend.core.model.metadata.types.JavaTypesManager
        org.talend.core.model.metadata.types.JavaType
        
    " 
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

// Retrive component properties
String url = ElementParameterParser.getValue(node,"__URL__");
String containerParam = ElementParameterParser.getValue(node,"__CONTAINER__");
String container = containerParam.trim().equals("") ? "\"\"" : containerParam;

 // Open the OPeNDAP dataset
%>

class AttributeHelper_<%=cid %> {

    public List<Attribute> getAttributes(opendap.dap.AttributeTable attributeTable, String containerPath) {
        List<Attribute> attributes = new java.util.ArrayList<Attribute>();
        addAttributes(attributeTable, attributes, containerPath);
        return attributes;
    }
    
    private void addAttributes(opendap.dap.AttributeTable attributeTable, List<Attribute> attributes, String containerPath) {
        if (attributeTable != null) {
            for (java.util.Enumeration<String> attributeNames = attributeTable.getNames(); attributeNames.hasMoreElements();) {
                String attributeName = attributeNames.nextElement();
                opendap.dap.Attribute dapAttribute = attributeTable.getAttribute(attributeName);
                try {
	                if (dapAttribute.isContainer()) {
	                    String newContainerPath = addContainerName(containerPath, dapAttribute.getName());
	                    addAttributes(dapAttribute.getContainer(), attributes, newContainerPath);                
	                } else {
	                    addSimpleAttribute(dapAttribute, attributes, containerPath);
	                }
                } catch (opendap.dap.NoSuchAttributeException e) {
                	//Shouldn't happen but don't swallow it if it does
                	throw new RuntimeException(e);
                }
    
            }
        }
    }
    
    private String addContainerName(String containerPath, String containerName) {
        StringBuilder result = new StringBuilder(containerPath);
        if (result.length()>0) {
	        result.append('.');
	    }
        result.append(containerName);
        return result.toString();
    }
    
    private void addSimpleAttribute(opendap.dap.Attribute dapAttribute, List<Attribute> attributes, String containerPath) 
      throws opendap.dap.NoSuchAttributeException {
        Attribute attribute = new Attribute();
        
        attribute.container = containerPath;
        attribute.name = dapAttribute.getName();
        attribute.type = dapAttribute.getTypeString();
        attribute.value = getValueString(dapAttribute.getValues());
        
        attributes.add(attribute);
    }
    
    private String getValueString(java.util.Enumeration<String> valuesEnumeration) {
        StringBuilder values = new StringBuilder("");
        
        for (; valuesEnumeration.hasMoreElements();) {
            String value = valuesEnumeration.nextElement();
            if (values.length() > 0) {
                values.append(',');
            }
            values.append(value);
        }
        
        return values.toString();
    }
    
    class Attribute {
        String container;
        String name;
        String value;
        String type;
    }

}

int nbLine_<%=cid %> = 0;
String dataSourceUrl_<%=cid %> = <%=url %>;

opendap.dap.DConnect2 conn_<%=cid %> = new opendap.dap.DConnect2(dataSourceUrl_<%=cid %>);
			
opendap.dap.AttributeTable attributes_<%=cid %> = conn_<%=cid %>.getDAS();
<%
if (!container.trim().equals("\"\"")) {
%>

    attributes_<%=cid %> = attributes_<%=cid %>.getAttribute(<%=container %>).getContainer();
        
<%
}
%>

AttributeHelper_<%=cid %> ah_<%=cid %> = new AttributeHelper_<%=cid %>();

for (AttributeHelper_<%=cid %>.Attribute attribute_<%=cid %> : ah_<%=cid %>.getAttributes(attributes_<%=cid %>, <%=container%>) ) {
	    	
    	
