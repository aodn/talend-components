<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.IConnection
	org.talend.core.model.process.EConnectionType
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn    
	java.io.File
	javax.xml.transform.Transformer 
	javax.xml.transform.TransformerConfigurationException 
	javax.xml.transform.TransformerException 
	javax.xml.transform.TransformerFactory 
	javax.xml.transform.stream.StreamResult 
	javax.xml.transform.stream.StreamSource
	java.util.List
    java.util.Map	
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String xmlField = ElementParameterParser.getValue(node, "__XML_FIELD__");

List<Map<String, String>> params = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__PARAMS__");

String incomingConnName = null;
List<? extends IConnection> inConns = node.getIncomingConnections();

if(inConns != null && inConns.size() > 0) {
    IConnection inConn = inConns.get(0);
    incomingConnName = inConn.getName();

}

List<IMetadataColumn> columnList = null;
List<IMetadataTable> metadataTables = node.getMetadataList();
if(metadataTables != null && metadataTables.size() > 0) {
    IMetadataTable metadataTable = metadataTables.get(0);
    columnList = metadataTable.getListColumns();
}

String outConnName = null;
List<? extends IConnection> outConns = node.getOutgoingConnections();

if(outConns != null && outConns.size() > 0) {
    IConnection outConn = outConns.get(0);
    outConnName = outConn.getName();
}

if (incomingConnName != null && outConnName != null) {

    for(IMetadataColumn metadataColumn : columnList) {
        if (metadataColumn.getLabel().equals(xmlField)) {
        %>
        
            //--- Apply xslt to <%=xmlField%>
            
            String xmlStr_<%=cid%> = <%=incomingConnName%>.<%=xmlField%>;
            
            javax.xml.transform.Transformer t<%=cid%> = xslTemplate_<%=cid%>.newTransformer();
            
            <%
                for (int i = 0; i < params.size(); i++) {
                    Map<String, String> line = params.get(i);
            %>
                    t<%=cid%>.setParameter(<%= line.get("NAME") %>, <%= line.get("VALUE") %>);
            <%		
                }
            %>
        
            javax.xml.transform.stream.StreamSource xmlSource_<%=cid%> = new javax.xml.transform.stream.StreamSource(new java.io.StringReader(xmlStr_<%=cid%>));
            java.io.ByteArrayOutputStream xmlWriter_<%=cid%> = new java.io.ByteArrayOutputStream();
            t<%=cid%>.transform(xmlSource_<%=cid%>, new javax.xml.transform.stream.StreamResult(xmlWriter_<%=cid%>));
            
            <%=outConnName%>.<%=xmlField%> = xmlWriter_<%=cid%>.toString();
            
        <%
        } else {
        %>
            <%=outConnName%>.<%=metadataColumn.getLabel()%> = <%=incomingConnName%>.<%=metadataColumn.getLabel()%>;
        <%
        }
    }

}
%>

